{"version":3,"sources":["src/store/meetinglist/actions.js"],"names":["POST_SUCCESS","POST_FAIL","POST_REQUEST","DELETE_SUCCESS","DELETE_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","LOGIN_REQUEST","LOGOUT_REQUEST","nextMeetingId","postSuccess","meetingInfoList","type","postFail","postRequest","sinceWhen","tilWhen","deleteSuccess","id","deleteRequest","loginSuccess","username","password","meetingList","token","Buffer","toString","loginFail","loginRequest","logoutRequest"],"mappings":";;;;;;AACA,IAAMA,eAAe,cAArB;AACA,IAAMC,YAAY,WAAlB;AACA,IAAMC,eAAe,cAArB;;AAEA,IAAMC,iBAAiB,gBAAvB;AACA,IAAMC,iBAAiB,gBAAvB;;AAEA,IAAMC,gBAAgB,eAAtB;AACA,IAAMC,aAAa,YAAnB;AACA,IAAMC,gBAAgB,eAAtB;AACA,IAAMC,iBAAiB,gBAAvB;;AAEA,IAAIC,gBAAgB,CAApB;;AAEO,IAAMC,oCAAc,SAAdA,WAAc,CAACC,eAAD;AAAA,SAAsB;AAC/CC,UAAOZ,YADwC;AAE/CW;;AAF+C,GAAtB;AAAA,CAApB;AAKA,IAAME,8BAAW,SAAXA,QAAW;AAAA,SAAO;AAC7BD,UAAOX;AADsB,GAAP;AAAA,CAAjB;;AAIA,IAAMa,oCAAc,SAAdA,WAAc,CAACC,SAAD,EAAYC,OAAZ;AAAA,SAAyB;AAClDJ,UAAOV,YAD2C;AAElDa,wBAFkD;AAGlDC;AAHkD,GAAzB;AAAA,CAApB;;AAMA,IAAMC,wCAAgB,SAAhBA,aAAgB,CAACC,EAAD;AAAA,SAAS;AACpCN,UAAOT,cAD6B;AAEpCe;AAFoC,GAAT;AAAA,CAAtB;AAIA,IAAMC,wCAAgB,SAAhBA,aAAgB,CAACD,EAAD;AAAA,SAAS;AACpCN,UAAOR,cAD6B;AAEpCc;AAFoC,GAAT;AAAA,CAAtB;;AAKA,IAAME,sCAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB;AAAA,SAAsC;AAChEX,UAAOP,aADyD;AAEhEgB,sBAFgE;AAGhEC,sBAHgE;AAIhEE,WAAS,IAAIC,MAAJ,CAAcJ,QAAd,SAA0BC,QAA1B,EAAsCI,QAAtC,CAA+C,QAA/C,CAJuD;AAKhEH,iBAAcA;AALkD,GAAtC;AAAA,CAArB;AAOA,IAAMI,gCAAY,SAAZA,SAAY;AAAA,SAAO;AAC9Bf,UAAON;AADuB,GAAP;AAAA,CAAlB;AAGA,IAAMsB,sCAAe,SAAfA,YAAe,CAACP,QAAD,EAAWC,QAAX;AAAA,SAAyB;AACnDV,UAAOL,aAD4C;AAEnDc,sBAFmD;AAGnDC;AAHmD,GAAzB;AAAA,CAArB;AAKA,IAAMO,wCAAgB,SAAhBA,aAAgB;AAAA,SAAO;AAClCjB,UAAOJ;AAD2B,GAAP;AAAA,CAAtB;;;;;;;;gCArDDR,Y;;gCACAC,S;;gCACAC,Y;;gCAEAC,c;;gCACAC,c;;gCAEAC,a;;gCACAC,U;;gCACAC,a;;gCACAC,c;;gCAEFC,a;;gCAESC,W;;gCAKAG,Q;;gCAIAC,W;;gCAMAG,a;;gCAIAE,a;;gCAKAC,Y;;gCAOAO,S;;gCAGAC,Y;;gCAKAC,a","file":"actions.js","sourceRoot":"/home/ubuntu/testdir/HW2/SWPP_HW2/reservation","sourcesContent":["\nconst POST_SUCCESS = 'POST_SUCCESS';\nconst POST_FAIL = 'POST_FAIL';\nconst POST_REQUEST = 'POST_REQUEST';\n\nconst DELETE_SUCCESS = 'DELETE_SUCCESS';\nconst DELETE_REQUEST = 'DELETE_REQUEST';\n\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAIL = 'LOGIN_FAIL';\nconst LOGIN_REQUEST = 'LOGIN_REQUEST';\nconst LOGOUT_REQUEST = 'LOGOUT_REQUEST';\n\nlet nextMeetingId = 0\n\nexport const postSuccess = (meetingInfoList) => ({\n  type : POST_SUCCESS,\n  meetingInfoList\n\n})\nexport const postFail = () => ({\n  type : POST_FAIL,\n})\n\nexport const postRequest = (sinceWhen, tilWhen) => ({\n  type : POST_REQUEST,\n  sinceWhen,\n  tilWhen,\n})\n\nexport const deleteSuccess = (id) => ({\n  type : DELETE_SUCCESS,\n  id\n})\nexport const deleteRequest = (id) => ({\n  type : DELETE_REQUEST,\n  id\n})\n\nexport const loginSuccess = (username, password, meetingList) => ({\n  type : LOGIN_SUCCESS,\n  username,\n  password,\n  token :  new Buffer(`${username}:${password}`).toString('base64'),\n  meetingList : meetingList\n})\nexport const loginFail = () => ({\n  type : LOGIN_FAIL\n})\nexport const loginRequest = (username, password) => ({\n  type : LOGIN_REQUEST,\n  username,\n  password\n})\nexport const logoutRequest = () => ({\n  type : LOGOUT_REQUEST,\n})\n"]}