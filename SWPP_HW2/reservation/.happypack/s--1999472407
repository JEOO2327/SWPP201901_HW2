'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginReq = loginReq;
exports.postReq = postReq;
exports.deleteReq = deleteReq;
exports.watchLoginReq = watchLoginReq;
exports.watchPostReq = watchPostReq;
exports.watchDeleteReq = watchDeleteReq;

var _effects = require('redux-saga/effects');

var _api = require('services/api');

var _api2 = _interopRequireDefault(_api);

var _selectors = require('./selectors');

var _actions = require('store/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(loginReq),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(postReq),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(deleteReq),
    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(watchLoginReq),
    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(watchPostReq),
    _marked6 = /*#__PURE__*/regeneratorRuntime.mark(watchDeleteReq);

var url = 'http://18.220.162.221:8000/meetings/';

function loginReq(action) {
  var name, pwd, hash, response, meetingList;
  return regeneratorRuntime.wrap(function loginReq$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          name = action.username;
          pwd = action.password;

          console.log('sagas : logging in...');
          hash = new Buffer(name + ':' + pwd).toString('base64');
          _context.next = 6;
          return (0, _effects.call)(fetch, url, {
            method: 'GET',
            headers: {
              'Authorization': 'Basic ' + hash
            }
          });

        case 6:
          response = _context.sent;
          _context.next = 9;
          return (0, _effects.call)([response, response.json]);

        case 9:
          meetingList = _context.sent;

          if (!response.ok) {
            _context.next = 16;
            break;
          }

          alert('로그인 성공');
          _context.next = 14;
          return (0, _effects.put)((0, _actions.loginSuccess)(name, pwd, meetingList));

        case 14:
          _context.next = 19;
          break;

        case 16:
          alert('로그인 실패');
          _context.next = 19;
          return (0, _effects.put)((0, _actions.loginFail)());

        case 19:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked, this);
}

function postReq(action) {
  var sinceWhen, tilWhen, response, response_data;
  return regeneratorRuntime.wrap(function postReq$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          sinceWhen = action.sinceWhen;
          tilWhen = action.tilWhen;

          console.log('sagas : postReq');
          _context2.next = 5;
          return (0, _effects.call)(fetch, url, {
            method: 'POST',
            headers: {
              'Authorization': 'Basic ' + localStorage.getItem("token"),
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              sinceWhen: sinceWhen,
              tilWhen: tilWhen
            })
          });

        case 5:
          response = _context2.sent;

          if (!response.ok) {
            _context2.next = 15;
            break;
          }

          alert('포스트 성공');
          _context2.next = 10;
          return (0, _effects.call)([response, response.json]);

        case 10:
          response_data = _context2.sent;
          _context2.next = 13;
          return (0, _effects.put)((0, _actions.postSuccess)(response_data));

        case 13:
          _context2.next = 18;
          break;

        case 15:
          alert('포스트 실패');
          _context2.next = 18;
          return (0, _effects.put)((0, _actions.postFail)());

        case 18:
        case 'end':
          return _context2.stop();
      }
    }
  }, _marked2, this);
}

function deleteReq(action) {
  var delete_url, response;
  return regeneratorRuntime.wrap(function deleteReq$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          //  console.log(action)
          delete_url = url + action.id + "/"; // delete할 meeting의 detail url
          //  console.log(delete_url)

          _context3.next = 3;
          return (0, _effects.call)(fetch, delete_url, {
            method: 'DELETE',
            headers: {
              'Authorization': 'Basic ' + localStorage.getItem("token")
            }
          });

        case 3:
          response = _context3.sent;

          if (!response.ok) {
            _context3.next = 10;
            break;
          }

          alert('삭제 성공');
          _context3.next = 8;
          return (0, _effects.put)((0, _actions.deleteSuccess)(action.id));

        case 8:
          _context3.next = 11;
          break;

        case 10:
          alert('삭제 실패');

        case 11:
        case 'end':
          return _context3.stop();
      }
    }
  }, _marked3, this);
}

//login request가 오는것을 catch해서 loginReq로 연결해줌
function watchLoginReq() {
  var action;
  return regeneratorRuntime.wrap(function watchLoginReq$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (!true) {
            _context4.next = 8;
            break;
          }

          _context4.next = 3;
          return (0, _effects.take)('LOGIN_REQUEST');

        case 3:
          action = _context4.sent;
          _context4.next = 6;
          return (0, _effects.call)(loginReq, action);

        case 6:
          _context4.next = 0;
          break;

        case 8:
        case 'end':
          return _context4.stop();
      }
    }
  }, _marked4, this);
}

function watchPostReq() {
  var action;
  return regeneratorRuntime.wrap(function watchPostReq$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (!true) {
            _context5.next = 8;
            break;
          }

          _context5.next = 3;
          return (0, _effects.take)('POST_REQUEST');

        case 3:
          action = _context5.sent;
          _context5.next = 6;
          return (0, _effects.call)(postReq, action);

        case 6:
          _context5.next = 0;
          break;

        case 8:
        case 'end':
          return _context5.stop();
      }
    }
  }, _marked5, this);
}
function watchDeleteReq() {
  var action;
  return regeneratorRuntime.wrap(function watchDeleteReq$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!true) {
            _context6.next = 8;
            break;
          }

          _context6.next = 3;
          return (0, _effects.take)('DELETE_REQUEST');

        case 3:
          action = _context6.sent;
          _context6.next = 6;
          return (0, _effects.call)(deleteReq, action);

        case 6:
          _context6.next = 0;
          break;

        case 8:
        case 'end':
          return _context6.stop();
      }
    }
  }, _marked6, this);
}

var _default = /*#__PURE__*/regeneratorRuntime.mark(function _default() {
  return regeneratorRuntime.wrap(function _default$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return (0, _effects.fork)(watchLoginReq);

        case 2:
          _context7.next = 4;
          return (0, _effects.fork)(watchPostReq);

        case 4:
          _context7.next = 6;
          return (0, _effects.fork)(watchDeleteReq);

        case 6:
        case 'end':
          return _context7.stop();
      }
    }
  }, _default, this);
});

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(url, 'url', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');

  __REACT_HOT_LOADER__.register(loginReq, 'loginReq', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');

  __REACT_HOT_LOADER__.register(postReq, 'postReq', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');

  __REACT_HOT_LOADER__.register(deleteReq, 'deleteReq', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');

  __REACT_HOT_LOADER__.register(watchLoginReq, 'watchLoginReq', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');

  __REACT_HOT_LOADER__.register(watchPostReq, 'watchPostReq', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');

  __REACT_HOT_LOADER__.register(watchDeleteReq, 'watchDeleteReq', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');

  __REACT_HOT_LOADER__.register(_default, 'default', '/home/ubuntu/testdir/HW2/SWPP_HW2/reservation/src/store/meetinglist/sagas.js');
}();

;