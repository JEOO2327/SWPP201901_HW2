{"version":3,"sources":["src/store/meetinglist/sagas.js"],"names":["loginReq","postReq","deleteReq","watchLoginReq","watchPostReq","watchDeleteReq","url","action","name","username","pwd","password","console","log","hash","Buffer","toString","fetch","method","headers","response","json","meetingList","ok","alert","sinceWhen","tilWhen","localStorage","getItem","body","JSON","stringify","response_data","delete_url","id"],"mappings":"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","file":"sagas.js","sourceRoot":"/home/ubuntu/testdir/HW2/SWPP_HW2/reservation","sourcesContent":["import { take, put, call, fork, spawn, select } from 'redux-saga/effects'\nimport api from 'services/api'\nimport { initialState } from './selectors'\nimport { postSuccess, postRequest, postFail, deleteSuccess, deleteRequest,\n  loginSuccess, loginFail, loginRequest, logoutRequest } from 'store/actions'\n\n\nconst url = 'http://18.220.162.221:8000/meetings/'\n\nexport function* loginReq(action){\n  let name = action.username\n  let pwd = action.password\n  console.log('sagas : logging in...');\n  const hash = new Buffer(`${name}:${pwd}`).toString('base64')\n  const response = yield call(fetch, url, {\n    method : 'GET',\n    headers : {\n      'Authorization': `Basic ${hash}`\n    }\n  })\n//  console.log(response)\n  const meetingList = yield call([response,response.json]) //JSON 형태\n//  console.log(\"sagas Login json meetingList : \" + JSON.stringify(meetingList));\n//  let arr = meetingList.map((element) => element.user);\n//    console.log(\"sagas Login json arr : \" + arr);\n  if( response.ok ) {\n    alert('로그인 성공')\n    yield put(loginSuccess(name, pwd, meetingList))  //put : saga에서 store로 날리는거\n  } else {\n    alert('로그인 실패')\n    yield put(loginFail())\n  }\n}\n\nexport function* postReq(action){\n  let sinceWhen = action.sinceWhen\n  let tilWhen = action.tilWhen\n  console.log('sagas : postReq');\n  const response = yield call(fetch, url, {\n    method : 'POST',\n    headers : {\n      'Authorization': `Basic ${localStorage.getItem(\"token\")}`,\n      'Content-Type' : 'application/json',\n    },\n    body :\n            JSON.stringify({\n              sinceWhen : sinceWhen,\n              tilWhen : tilWhen\n            })\n  })\n  if( response.ok ){\n    alert('포스트 성공')\n    const response_data = yield call([response, response.json]);\n  //  console.log(\"sagas POSTREQ response_data : \" + response_data)\n    yield put(postSuccess(response_data)) //JSON형태의 데이터\n  } else{\n    alert('포스트 실패')\n    yield put(postFail())\n  }\n}\n\nexport function* deleteReq(action){\n//  console.log(action)\n  let delete_url = url + action.id + \"/\" // delete할 meeting의 detail url\n//  console.log(delete_url)\n  const response = yield call(fetch, delete_url, {\n                      method : 'DELETE',\n                      headers : {\n                        'Authorization': `Basic ${localStorage.getItem(\"token\")}`,\n                      },\n                    })\n\n  if(response.ok){\n    alert('삭제 성공')\n    yield put(deleteSuccess(action.id))\n  }\n  else{\n    alert('삭제 실패')\n  }\n\n}\n\n//login request가 오는것을 catch해서 loginReq로 연결해줌\nexport function* watchLoginReq(){\n  while (true) {\n    const action = yield take('LOGIN_REQUEST');\n    yield call(loginReq, action)\n  }\n}\n\nexport function* watchPostReq(){\n  while(true){\n    const action = yield take('POST_REQUEST');\n    yield call(postReq, action)\n  }\n}\nexport function* watchDeleteReq(){\n  while(true){\n    const action = yield take('DELETE_REQUEST');\n    yield call(deleteReq, action)\n  }\n}\n\nexport default function* () {\n  yield fork(watchLoginReq)\n  yield fork(watchPostReq)\n  yield fork(watchDeleteReq)\n\n}\n"]}